// Code generated by MockGen. DO NOT EDIT.
// Source: ./pet_store.go

// Package pet is a generated GoMock package.
package pet

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockPetStoreInterface is a mock of PetStoreInterface interface.
type MockPetStoreInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPetStoreInterfaceMockRecorder
}

// MockPetStoreInterfaceMockRecorder is the mock recorder for MockPetStoreInterface.
type MockPetStoreInterfaceMockRecorder struct {
	mock *MockPetStoreInterface
}

// NewMockPetStoreInterface creates a new mock instance.
func NewMockPetStoreInterface(ctrl *gomock.Controller) *MockPetStoreInterface {
	mock := &MockPetStoreInterface{ctrl: ctrl}
	mock.recorder = &MockPetStoreInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPetStoreInterface) EXPECT() *MockPetStoreInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPetStoreInterface) Create(arg0 *Pet) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPetStoreInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPetStoreInterface)(nil).Create), arg0)
}

// GetByID mocks base method.
func (m *MockPetStoreInterface) GetByID(id uuid.UUID) (*Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPetStoreInterfaceMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPetStoreInterface)(nil).GetByID), id)
}
