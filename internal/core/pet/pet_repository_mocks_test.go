// Code generated by MockGen. DO NOT EDIT.
// Source: ./pet_repository.go

// Package pet is a generated GoMock package.
package pet

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockPetRepostitoryDBI is a mock of PetRepostitoryDBI interface.
type MockPetRepostitoryDBI struct {
	ctrl     *gomock.Controller
	recorder *MockPetRepostitoryDBIMockRecorder
}

// MockPetRepostitoryDBIMockRecorder is the mock recorder for MockPetRepostitoryDBI.
type MockPetRepostitoryDBIMockRecorder struct {
	mock *MockPetRepostitoryDBI
}

// NewMockPetRepostitoryDBI creates a new mock instance.
func NewMockPetRepostitoryDBI(ctrl *gomock.Controller) *MockPetRepostitoryDBI {
	mock := &MockPetRepostitoryDBI{ctrl: ctrl}
	mock.recorder = &MockPetRepostitoryDBIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPetRepostitoryDBI) EXPECT() *MockPetRepostitoryDBIMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockPetRepostitoryDBI) Connect() (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockPetRepostitoryDBIMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockPetRepostitoryDBI)(nil).Connect))
}
